<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="false" scanPeriod="30 seconds" debug="false" >

	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
	<conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
	<conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />

	<property name="FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
	<property name="FILE_LOG_CHARSET" value="${FILE_LOG_CHARSET:-${file.encoding:-UTF-8}}"/>
	<property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
	<property name="CONSOLE_LOG_CHARSET" value="${CONSOLE_LOG_CHARSET:-${file.encoding:-UTF-8}}"/>

	<!--使用springboot的配置-->
	<springProperty scope="context" name="log.system" source="hcf.log.system" defaultValue="hengyidai"/>
	<springProperty scope="context" name="log.appName" source="hcf.log.app-name" defaultValue="go-rmq"/>
	<springProperty scope="context" name="log.path" source="hcf.log.path" defaultValue="/opt/logs"/>
	<springProperty scope="context" name="log.level" source="hcf.log.level" defaultValue="INFO"/>
	<springProperty scope="context" name="log.filePattern" source="hcf.log.file-pattern" defaultValue="%d{yyyy-MM-dd HH:mm:ss.SSS}|%level|%thread|%X{clientIp}|%X{traceId}|%X{rpcId}|%c.%M[%L]|%msg%n"/>
<!--	<springProperty scope="context" name="log.consolePattern" source="hcf.log.console-pattern" defaultValue="%red(%d{yyyy-MM-dd HH:mm:ss.SSS})|%highlight(%level)|%green(%thread)|%X{clientIp}|%X{traceId}|%X{rpcId}|%boldMagenta(%c.%M[%L])|%cyan(%msg%n)"/>-->
	<springProperty scope="context" name="log.consolePattern" source="hcf.log.console-pattern" defaultValue="%red(%d{yyyy-MM-dd HH:mm:ss.SSS})[%highlight(%level)][%green(%thread)][%X{clientIp}][%X{traceId}][%X{rpcId}][%boldMagenta(%c.%M[%L])]%cyan(%msg%n)"/>

	<!--控制台输出-->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<charset>UTF-8</charset>
			<pattern>${log.consolePattern}</pattern>
		</encoder>
	</appender>

	<!-- 日志文件 -->
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--
			按照时间与文件大小两个维度进行分割文件,%d{yyyy-MM-dd}代表按天分割,%d{yyyy-MM-dd-HH}代表按小时分割
			maxHistory最大保留文件时间数,按天分割代表几天,小时分割则代表几个小时
			maxFileSize单文件最大容量,超过则增加%i的值
			totalSizeCap总计文件容量
		-->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<FileNamePattern>${log.path}/${log.system}/${log.appName}/${log.appName}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
			<maxHistory>15</maxHistory>
			<maxFileSize>500MB</maxFileSize>
			<totalSizeCap>20GB</totalSizeCap>
		</rollingPolicy>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${log.filePattern}</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>
	<!--
		异步文件
		queueSize:BlockingQueue最大容量,默认为256,要看具体业务规模来调整此参数
		discardingThreshold:不丢弃任何日志，设置该值为0。默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。
		includeCallerData:是否包含调用者的信息(方法名及行号),AsyncAppender默认为false,只有一些获取代价较低的数据，如线程名称，MDC值才会被保留。如果设置为true，就会包含caller data
	-->
	<appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
		<queueSize>512</queueSize>
		<discardingThreshold>0</discardingThreshold>
		<includeCallerData>true</includeCallerData>
		<appender-ref ref="FILE" />
	</appender>

	<!--开发环境-->
	<springProfile name="dev">
		<root level="${log.level}" >
			<appender-ref ref="STDOUT" />
		</root>
	</springProfile>

	<!--非开发环境-->
	<springProfile name="!dev">
		<!--
			logger配置
			level属性:未配置时则继承root中定义的level
			additivity属性:是否向上级传递,默认为true,代表此logger内的appender和上级root里的appender都打印一遍
			appender-ref:如未配置则继承root中定义的appender-ref
		-->
		<logger name="com.credithc.xd.late" level="${log.level}" additivity="false">
			<appender-ref ref="ASYNC_FILE"/>
			<appender-ref ref="STDOUT" />
		</logger>

		<!-- show sql -->
		<logger name="com.credithc.xd.late.data.mapper" level="DEBUG">
			<!--<appender-ref ref="console" />-->
		</logger>

		<root level="${log.level}" >
			<appender-ref ref="ASYNC_FILE" />
			<appender-ref ref="STDOUT" />
		</root>
	</springProfile>

</configuration>
